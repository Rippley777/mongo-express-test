openapi: 3.0.0
info:
  title: Prototype / Testing API
  version: 1.0.0
  description: An API using MongoDB, Express, WebSockets and Swagger

paths:
  /api/upload/image:
    post:
      summary: Upload an image
      description: Allows users to upload an image file.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload
                name:
                  type: string
                  description: Name associated with the image
            required:
              - image
      responses:
        "200":
          description: Image uploaded and saved.
          content:
            text/plain:
              schema:
                type: string
                example: "Image uploaded and saved."
        "500":
          description: An error occurred during the upload.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An error occurred."
  /api/upload/image/{id}:
    get:
      summary: Retrieve an image
      description: Fetches an image by its unique identifier (ID) and returns the image data.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique identifier of the image to retrieve.
      responses:
        "200":
          description: Successfully retrieved and returned the image data.
          content:
            "*/*": # Using wildcard media type as the content type varies
              schema:
                type: string
                format: binary
                description: Binary data of the image.
        "404":
          description: Image not found.
          content:
            text/plain:
              schema:
                type: string
                example: "Image not found."
  /api/todos:
    get:
      summary: Retrieves all todos
      description: Fetches all todo items from the database, returning an array of todos.
      responses:
        "200":
          description: A list of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todo"
        "500":
          description: Server error

    post:
      summary: Create a new todo
      description: Adds a new todo item to the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
      responses:
        "201":
          description: Returns the created todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          description: Validation error
        "500":
          description: Server error

    delete:
      summary: Deletes a todo
      description: Deletes a todo item from the database by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The todo ID
      responses:
        "200":
          description: Returns the deleted todo's ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
        "404":
          description: Todo not found
        "500":
          description: Server error
  /api/blogposts:
    get:
      summary: Get all blog posts
      responses:
        "200":
          description: A list of blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogPost"
    post:
      summary: Create a new blog post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogPost"
      responses:
        "201":
          description: The created blog post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"

    /api/blogposts/{id}:
      get:
        summary: Get a blog post by ID
        parameters:
          - name: id
            in: path
            required: true
            description: ID of the blog post to retrieve
            schema:
              type: string
              format: objectId
        responses:
          "200":
            description: A blog post
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/BlogPost"
          "404":
            description: Blog post not found
      put:
        summary: Update a blog post by ID
        parameters:
          - name: id
            in: path
            required: true
            description: ID of the blog post to update
            schema:
              type: string
              format: objectId
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
        responses:
          "200":
            description: The updated blog post
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/BlogPost"
          "404":
            description: Blog post not found
      delete:
        summary: Delete a blog post by ID
        parameters:
          - name: id
            in: path
            required: true
            description: ID of the blog post to delete
            schema:
              type: string
              format: objectId
        responses:
          "204":
            description: Blog post deleted
          "404":
            description: Blog post not found
  /api/products:
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                manufacturer:
                  type: string
                model:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                quantity:
                  type: integer
                filters:
                  type: string
                date:
                  type: string
                  format: date-time
                featured:
                  type: boolean
                imageIds:
                  type: array
                  items:
                    type: string
                    format: objectId
      responses:
        "200":
          description: The created product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

    get:
      summary: Get all products with images
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
components:
  schemas:
    Todo:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the todo item
        text:
          type: string
          description: The text of the todo item
        completed:
          type: boolean
          description: The completion status of the todo item
        createdAt:
          type: string
          format: date-time
          description: The time at which the todo item was created
      required:
        - text
    BlogPost:
      type: object
      properties:
        content:
          type: string
          description: The content of the blog post
        title:
          type: string
          description: The title of the blog post
        author:
          type: string
          description: The author of the blog post
        images:
          type: array
          description: Array of image IDs
          items:
            type: string
            format: objectId
            description: The ObjectId reference to the image
        date:
          type: string
          format: date-time
          description: The date the blog post was created
        featured:
          type: boolean
          description: Indicates if the blog post is featureds
    Product:
      type: object
      properties:
        title:
          type: string
          description: The title of the product
        manufacturer:
          type: string
          description: The manufacturer of the product
        model:
          type: string
          description: The model of the product
        description:
          type: string
          description: The description of the product
        price:
          type: number
          format: float
          description: The price of the product
        quantity:
          type: integer
          description: The quantity of the product available
        filters:
          type: array
          items:
            type: string
          description: Filters applicable to the product
        date:
          type: string
          format: date-time
          description: The date the product was added
        featured:
          type: boolean
          description: Indicates if the product is featured
        images:
          type: array
          items:
            type: string
            format: objectId
          description: Array of image IDs
        availability:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                description: Location where the product is available
              quantity:
                type: integer
                description: Quantity available at the location
              price:
                type: number
                format: float
                description: Price at the location
          description: Availability details of the product
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the product
